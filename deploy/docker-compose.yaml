version: "3.9"
services:

  frontenvoy:
    image: envoyproxy/envoy:v1.16.2
    volumes:
      - ./front/envoy.yaml:/etc/envoy/envoy.yaml
      - /etc/letsencrypt/live/esm-api.aadi.my-0001/fullchain.pem:/etc/envoy/certs/fullchain.pem
      - /etc/letsencrypt/live/esm-api.aadi.my-0001/privkey.pem:/etc/envoy/certs/privkey.pem
    restart: always
    environment: 
      - ENVOY_UID=0
      - ENVOY_GID=0
    networks:
      - envoymesh
    expose:
      - "443"
    ports:
      - "443:443"

  grpc-web-proxy:
    image: envoyproxy/envoy:v1.16.2
    volumes:
      - ./grpc_web_proxy/envoy.yaml:/etc/envoy/envoy.yaml
    restart: always
    environment: 
      - ENVOY_UID=0
      - ENVOY_GID=0
    networks:
      - envoymesh
    depends_on:
      - "esmservice"
    links:
      - "esmservice"
    expose:
      - "8080"
    ports: 
      - "8080:8080"

  esmservice:
    build:
      context: .
      dockerfile: ./service/Dockerfile
    restart: always
    depends_on:
      - "postgres-master"
    links:
      - "postgres-master"
    networks:
      - envoymesh
    expose:
      - "50051"
    ports:
      - "50051:50051"

  esm-game-loader:
    build:
      context: .
      dockerfile: ./gloader/Dockerfile
    restart: always
    networks:
      - envoymesh
    expose:
      - "3033"
    ports:
      - "3033:3033"

  esm-admin:
    build:
      context: .
      dockerfile: ./admin/Dockerfile
    restart: always
    networks:
      - envoymesh
    expose:
      - "3030"
    ports:
      - "3030:3030"
      
  esm-stripe:
    build:
      context: .
      dockerfile: ./stripe/Dockerfile
    restart: always
    networks:
      - envoymesh
    expose:
      - "4242"
    ports:
      - "4242:4242"

  
  postgres-master:
    build:
      context: .
      dockerfile: ./postgres/master/Dockerfile
    restart: always
    command: >
      -c listen_addresses=*
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/server.crt
      -c ssl_key_file=/var/lib/postgresql/server.key
      -c ssl_ca_file=/var/lib/postgresql/CA.crt
      -c ssl_crl_file=/var/lib/postgresql/CA.crl
      -c hot_standby=on
      -c wal_level=replica
      -c wal_keep_size=1024
      -c max_wal_senders=10
      -c wal_compression=on
      -c archive_mode=on
    ######  to check if settings is ok try run the SELECT current_setting('hot_standby');
    #-c archive_command=cp %p /archives/%f
    #-c restore_command=cp /archives/%f %p
    volumes:
      - database-data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: doadmin
      POSTGRES_PASSWORD: tf45h3hpz6xstby6
      PG_REP_USER: replicator
      PG_REP_PASSWORD: tf45h3hpz6xstby6
    networks:
      - envoymesh
    expose:
      - "5432"
    ports:
      - "5432:5432"

    dbpg-master:
      build:
        context: .
        dockerfile: ./postgres/master/Dockerfile
      restart: always
      command: >
        -c port=25432
        -c listen_addresses=*
        -c ssl=on
        -c ssl_cert_file=/var/lib/postgresql/server.crt
        -c ssl_key_file=/var/lib/postgresql/server.key
        -c ssl_ca_file=/var/lib/postgresql/CA.crt
        -c ssl_crl_file=/var/lib/postgresql/CA.crl
        -c hot_standby=on
        -c wal_level=replica
        -c wal_keep_size=1024
        -c max_wal_senders=10
        -c wal_compression=on
        -c archive_mode=on
      ######  to check if settings is ok try run the SELECT current_setting('hot_standby');
      #volumes:
      #  - database-data:/var/lib/postgresql/data/
      environment:
        POSTGRES_DB: postgres
        POSTGRES_USER: doadmin
        POSTGRES_PASSWORD: tf45h3hpz6xstby6
        PG_REP_USER: replicator
        PG_REP_PASSWORD: tf45h3hpz6xstby6
      networks:
        - envoymesh
      expose:
        - "25432"
      ports:
        - "25432:25432"
volumes:
  database-data:
networks:
  envoymesh: {}