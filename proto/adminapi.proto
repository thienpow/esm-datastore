syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.esportsmini.adminapi";
option java_outer_classname = "AdminApiProto";

package adminapi.esm;


service AdminApi {
  rpc SignIn(SignInRequest) returns (SignInResponse) {}

  // Common
  rpc ListStatusType(ListStatusTypeRequest) returns (ListStatusTypeResponse) {}
  rpc ListWinType(ListWinTypeRequest) returns (ListWinTypeResponse) {}
  rpc ListTimezones(ListTimezonesRequest) returns (ListTimezonesResponse) {}

  // User
  rpc AddUser(AddUserRequest) returns (AddUserResponse) {}
  rpc UpdateEmailConfirmed(UpdateEmailConfirmedRequest) returns (UpdateEmailConfirmedResponse) {}
  rpc UpdateSocialLinkFB(UpdateSocialLinkFBRequest) returns (UpdateSocialLinkFBResponse) {}
  rpc UpdateSocialLinkGoogle(UpdateSocialLinkGoogleRequest) returns (UpdateSocialLinkGoogleResponse) {}
  rpc UpdateUserStatus(UpdateUserStatusRequest) returns (UpdateUserStatusResponse) {}
  rpc UpdateAddress(UpdateAddressRequest) returns (UpdateAddressResponse) {}
  rpc UpdateUserSettings(UpdateUserSettingsRequest) returns (UpdateUserSettingsResponse) {}
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {}
  rpc ListUser(ListUserRequest) returns (ListUserResponse) {}
  rpc GetUserCount(GetUserCountRequest) returns (GetUserCountResponse) {}

  // Config
  rpc UpdateConfig(UpdateConfigRequest) returns (UpdateConfigResponse) {}
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {}

  // Spinner 
  rpc AddSpinnerRule(AddSpinnerRuleRequest) returns (AddSpinnerRuleResponse) {}
  rpc UpdateSpinnerRule(UpdateSpinnerRuleRequest) returns (UpdateSpinnerRuleResponse) {}
  rpc DeleteSpinnerRule(DeleteSpinnerRuleRequest) returns (DeleteSpinnerRuleResponse) {}
  rpc ListSpinnerRule(ListSpinnerRuleRequest) returns (ListSpinnerRuleResponse) {}

  // Game
  rpc AddGame(AddGameRequest) returns (AddGameResponse) {}
  rpc UpdateGame(UpdateGameRequest) returns (UpdateGameResponse) {}
  rpc AddGameLeaderRule(AddGameLeaderRuleRequest) returns (AddGameLeaderRuleResponse) {}
  rpc DeleteGameLeaderRule(DeleteGameLeaderRuleRequest) returns (DeleteGameLeaderRuleResponse) {}
  rpc ListGameLeaderRule(ListGameLeaderRuleRequest) returns (ListGameLeaderRuleResponse) {}
  rpc GetGameCode(GetGameCodeRequest) returns (GetGameCodeResponse) {}
  rpc DeleteGame(DeleteGameRequest) returns (DeleteGameResponse) {}
  rpc ListGame(ListGameRequest) returns (ListGameResponse) {}
  rpc GetGameCount(GetGameCountRequest) returns (GetGameCountResponse) {}

  // GPlayer
  rpc LogGEnter(LogGEnterRequest) returns (LogGEnterResponse) {}
  rpc LogGLeave(LogGLeaveRequest) returns (LogGLeaveResponse) {}

  // Invite
  rpc GenerateInviteURL(GenerateInviteUrlRequest) returns(GenerateInviteUrlResponse) {}
  rpc AddInvite(AddInviteRequest) returns (AddInviteResponse) {}
  rpc ClaimInvite(ClaimInviteRequest) returns (ClaimInviteResponse) {}
  rpc ListInvitedBy(ListInvitedByRequest) returns (ListInvitedByResponse) {}
  rpc GetInvitedByCount(GetInvitedByCountRequest) returns (GetInvitedByCountResponse) {}
  rpc DeleteInvite(DeleteInviteRequest) returns (DeleteInviteResponse) {}

  // Item
  rpc AddItem(AddItemRequest) returns (AddItemResponse) {}
  rpc UpdateItem(UpdateItemRequest) returns (UpdateItemResponse) {}
  rpc DeleteItem(DeleteItemRequest) returns (DeleteItemResponse) {}
  rpc ListItem(ListItemRequest) returns (ListItemResponse) {}
  rpc GetItemCount(GetItemCountRequest) returns (GetItemCountResponse) {}
  rpc ListItemType(ListItemTypeRequest) returns (ListItemTypeResponse) {}


  // Prize
  rpc AddPrize(AddPrizeRequest) returns (AddPrizeResponse) {}
  rpc UpdatePrize(UpdatePrizeRequest) returns (UpdatePrizeResponse) {}
  rpc DeletePrize(DeletePrizeRequest) returns (DeletePrizeResponse) {}
  rpc ListPrize(ListPrizeRequest) returns (ListPrizeResponse) {}
  rpc GetPrizeCount(GetPrizeCountRequest) returns (GetPrizeCountResponse) {}
  rpc ListPrizeType(ListPrizeTypeRequest) returns (ListPrizeTypeResponse) {}

  // Rank
  rpc AddRank(AddRankRequest) returns (AddRankResponse) {}
  rpc UpdateRank(UpdateRankRequest) returns (UpdateRankResponse) {}
  rpc DeleteRank(DeleteRankRequest) returns (DeleteRankResponse) {}
  rpc ListRank(ListRankRequest) returns (ListRankResponse) {}

  // Shop
  rpc Buy(BuyRequest) returns (BuyResponse) {}

  // Subscription
  rpc AddSubscription(AddSubscriptionRequest) returns (AddSubscriptionResponse) {}
  rpc UpdateSubscription(UpdateSubscriptionRequest) returns (UpdateSubscriptionResponse) {}
  rpc DeleteSubscription(DeleteSubscriptionRequest) returns (DeleteSubscriptionResponse) {}
  rpc ListSubscription(ListSubscriptionRequest) returns (ListSubscriptionResponse) {}
  rpc GetSubscriptionCount(GetSubscriptionCountRequest) returns (GetSubscriptionCountResponse) {}
  rpc ListSubscriptionType(ListSubscriptionTypeRequest) returns (ListSubscriptionTypeResponse) {}

  // Tournament
  rpc AddTournament(AddTournamentRequest) returns (AddTournamentResponse) {}
  rpc AddTournamentSet(AddTournamentSetRequest) returns (AddTournamentSetResponse) {}
  rpc AddTournamentSetGameRule(AddTournamentSetGameRuleRequest) returns (AddTournamentSetGameRuleResponse) {}
  rpc UpdateTournament(UpdateTournamentRequest) returns (UpdateTournamentResponse) {}
  rpc UpdateTournamentSet(UpdateTournamentSetRequest) returns (UpdateTournamentSetResponse) {}
  rpc UpdateTournamentSetGameRule(UpdateTournamentSetGameRuleRequest) returns (UpdateTournamentSetGameRuleResponse) {}
  rpc DeleteTournament(DeleteTournamentRequest) returns (DeleteTournamentResponse) {}
  rpc DeleteTournamentSet(DeleteTournamentSetRequest) returns (DeleteTournamentSetResponse) {}
  rpc DeleteTournamentSetGameRule(DeleteTournamentSetGameRuleRequest) returns (DeleteTournamentSetGameRuleResponse) {}
  rpc ListTournament(ListTournamentRequest) returns (ListTournamentResponse) {}
  rpc ListTournamentSet(ListTournamentSetRequest) returns (ListTournamentSetResponse) {}
  rpc ListTournamentSetGameRule(ListTournamentSetGameRuleRequest) returns (ListTournamentSetGameRuleResponse) {}
  rpc GetTournamentCount(GetTournamentCountRequest) returns (GetTournamentCountResponse) {}
  rpc GetTournamentSetCount(GetTournamentSetCountRequest) returns (GetTournamentSetCountResponse) {}

  // Winner
  rpc AddWinner(AddWinnerRequest) returns (AddWinnerResponse) {}
  rpc DeleteWinner(DeleteWinnerRequest) returns (DeleteWinnerResponse) {}
  rpc ListWinner(ListWinnerRequest) returns (ListWinnerResponse) {}
  rpc ClaimWinner(ClaimWinnerRequest) returns (ClaimWinnerResponse) {}
  rpc GetWinnerCount(GetWinnerCountRequest) returns (GetWinnerCountResponse) {}

}
















/*
*************************************** Common ***************************************
*/

//Get StatusType from db
message ListStatusTypeRequest {
}
message ListStatusTypeResponse {
  repeated StatusTypeDetail result = 1;
}
message StatusTypeDetail {
  int32 id = 1;
  string title = 2;
}

//Get WinType from db
message ListWinTypeRequest {
}
message ListWinTypeResponse {
  repeated WinTypeDetail result = 1;
}
message WinTypeDetail {
  int32 id = 1;
  string title = 2;
}

//Get Timezones from db
message ListTimezonesRequest {
}
message ListTimezonesResponse {
  repeated TimezonesDetail result = 1;
}
message TimezonesDetail {
  int32 id = 1;
  double offset = 2;
  string stext = 3;
  string ltext = 4;
}





/*
*************************************** User ***************************************
*/
//SignIn the user
message SignInRequest {
  string username = 1;
  string password = 2;
}
message SignInResponse {
  UserDetail result = 1;
}


//Add a new user
message AddUserRequest {
  string username = 1;
  string password = 2;
  string email = 3;
  string phone = 4;
  string firstname = 5;
  string lastname = 6;
  string social_link_fb = 7;
  string social_link_google = 8;
  string avatar_url = 9;
  string id_token = 10; // firebase.auth().currentUser.getIdToken
}
message AddUserResponse {
  string result = 1; //response a id
}

//Update an existing user data
message UpdateEmailConfirmedRequest {
  int64 id = 1;
  bool status = 2;
}
message UpdateEmailConfirmedResponse {
  string result = 1;
}

//Update an existing user data
message UpdateSocialLinkFBRequest {
  int64 id = 1;
  string fb_id = 2;
}
message UpdateSocialLinkFBResponse {
  string result = 1;
}

//Update an existing user data
message UpdateSocialLinkGoogleRequest {
  int64 id = 1;
  string google_id = 2;
}
message UpdateSocialLinkGoogleResponse {
  string result = 1;
}

//Update an existing user data
message UpdateUserStatusRequest {
  int64 id = 1;
  int32 status = 2;
}
message UpdateUserStatusResponse {
  string result = 1;
}

//Update an existing user data
message UpdateAddressRequest {
  int64 id = 1;
  string full_name = 2;
  string address = 3;
  string city = 4;
  string state = 5;
  string zip_code= 6;
  string country = 7;
  string country_code = 8;
}
message UpdateAddressResponse {
  string result = 1;
}

//Update an existing user data
message UpdateUserSettingsRequest {
  int64 id = 1;
  bool is_notify_allowed = 2;
  bool is_notify_new_reward = 3;
  bool is_notify_new_tournament = 4;
  bool is_notify_tour_ending = 5;
  string nick_name = 6;
}
message UpdateUserSettingsResponse {
  string result = 1;
}

//Update an existing user data
message ChangePasswordRequest {
  string username = 1;
  string old_password = 2;
  string new_password = 3;
}
message ChangePasswordResponse {
  string result = 1;
}

//Get Count based on Status ID, 1=Draft, 2=Published, 3=Archived/Blocked
message GetUserCountRequest {
}
message GetUserCountResponse {
  UserCount result = 1;
}
message UserCount {
  int64 active = 1;
  int64 blocked = 2;
}

//Get users from db
message ListUserRequest {
  int64 limit = 1;
  int64 offset = 2;
  string search_username = 3;
}
message ListUserResponse {
  repeated UserDetail result = 1;
}
message UserDetail {
  int64 id = 1;
  string username = 2;
  string email = 3;
  string phone = 4;
  string firstname = 5;
  string lastname = 6;
  int64 created_on = 7;
  int64 last_login = 8;
  int32 role_id = 9;
  int32 status = 10;
  int64 gem_balance = 11;
  string social_link_fb = 12;
  string social_link_google = 13;
  string avatar_url = 14;
  int32 exp = 15;
  string full_name = 16;
  string address = 17;
  string city = 18;
  string state = 19;
  string zip_code= 20;
  string country = 21;
  int32 country_code = 22;
  bool is_notify_allowed = 23;
  bool is_notify_new_reward = 24;
  bool is_notify_new_tournament = 25;
  bool is_notify_tour_ending = 26;
  string nick_name = 27;
  string jwt_token =  28;
}


















/*
*************************************** Config ***************************************
*/
//Update an existing config data
message UpdateConfigRequest {
  repeated int32 spinner = 1;
  int32 invites = 2;
  int32 games_per_ad = 3;
  int32 days_to_claim = 4;
}
message UpdateConfigResponse {
  string result = 1;
}

//Get config Get from db
message GetConfigRequest {
}
message GetConfigResponse {
  ConfigDetail result = 1;
}
message ConfigDetail {
  repeated int32 spinner = 1;
  int32 invites = 2;
  int32 games_per_ad = 3;
  int32 days_to_claim = 4;
}



//Add a new Spinner Rule
message AddSpinnerRuleRequest {
  double probability = 1;
  double win = 2;
  int32 type_id = 3;
}
message AddSpinnerRuleResponse {
  string result = 1;
}
//Add a new Spinner Rule
message UpdateSpinnerRuleRequest {
  int32 id = 1;
  double probability = 2;
  double win = 3;
  int32 type_id = 4;
}
message UpdateSpinnerRuleResponse {
  string result = 1;
}

//Delete an existing ScoreRule from db
message DeleteSpinnerRuleRequest {
  int32 id = 1;
}
message DeleteSpinnerRuleResponse {
  string result = 1;
}

//list game score rules from db
message ListSpinnerRuleRequest {
}
message ListSpinnerRuleResponse {
  repeated SpinnerRuleDetail result = 1;
}
message SpinnerRuleDetail {
  int32 id = 1;
  double probability = 2;
  double win = 3;
  int32 type_id = 4;
}
















/*
*************************************** Game ***************************************
*/
//Add a new game
message AddGameRequest {
  string title = 1;
  string subtitle = 2;
  string img_url = 3;
  string content = 4;
  int32 type_id = 5;
  string game_code = 6;
  int32 engine_id = 7;
  int32 version = 8;
  int32 status = 9;
  int32 score_rule = 10;
  int32 watch_ad_get_tickets = 11;
  int32 watch_ad_get_exp = 12;
  int32 use_gem_get_tickets = 13;
  int32 use_gem_get_exp = 14;
}
message AddGameResponse {
  string result = 1;
}


//Update an existing game data
message UpdateGameRequest {
  int64 id = 1;
  string title = 2;
  string subtitle = 3;
  string img_url = 4;
  string content = 5;
  int32 type_id = 6;
  string game_code = 7;
  int32 engine_id = 8;
  int32 version = 9;
  int32 status = 10;
  int32 score_rule = 11;
  int32 watch_ad_get_tickets = 12;
  int32 watch_ad_get_exp = 13;
  int32 use_gem_get_tickets = 14;
  int32 use_gem_get_exp = 15;
}
message UpdateGameResponse {
  string result = 1;
}

//Add a new ScoreRule
message AddGameLeaderRuleRequest {
  int64 game_id = 1;
  int32 rank = 2;
  int32 tickets = 3;
  int32 exp = 4;
}
message AddGameLeaderRuleResponse {
  string result = 1;
}

//Delete an existing ScoreRule from db
message DeleteGameLeaderRuleRequest {
  int64 game_id = 1;
  int32 rank = 2;
}
message DeleteGameLeaderRuleResponse {
  string result = 1;
}

//list game score rules from db
message ListGameLeaderRuleRequest {
  int64 game_id = 1;
}
message ListGameLeaderRuleResponse {
  repeated GameLeaderRuleDetail result = 1;
}
message GameLeaderRuleDetail {
  int64 game_id = 1;
  int32 rank = 2;
  int32 tickets = 3;
  int32 exp = 4;
}

//Get the game's code from db
message GetGameCodeRequest {
  int64 id = 1;
}
message GetGameCodeResponse {
  string result = 1;
}


//Delete an existing game from db
message DeleteGameRequest {
  int64 id = 1;
}
message DeleteGameResponse {
  string result = 1;
}


//Get games from db
message ListGameRequest {
  int64 limit = 1;
  int64 offset = 2;
  string search_title = 3;
  int32 status = 4;
}
message ListGameResponse {
  repeated GameDetail result = 1;
}
message GameDetail {
  int64 id = 1;
  string title = 2;
  string subtitle = 3;
  string img_url = 4;
  string content = 5;
  int32 type_id = 6;
  int32 engine_id = 7;
  int32 version = 8;
  int32 status = 9;
  int32 score_rule = 10;
  int32 watch_ad_get_tickets = 11;
  int32 watch_ad_get_exp = 12;
  int32 use_gem_get_tickets = 13;
  int32 use_gem_get_exp = 14;
}


//Get Count based on Status ID, 1=Draft, 2=Published, 3=Archived/Blocked
message GetGameCountRequest {
}
message GetGameCountResponse {
  GameCount result = 1;
}
message GameCount {
  int64 draft = 1;
  int64 published = 2;
  int64 archived = 3;
}


















/*
*************************************** GPlayer ***************************************
*/
//LogEnter will response a secret key to be used for LogLeave
//LogEnter = log the status of starting a game
message LogGEnterRequest {
  string secret = 1;
  string access_token = 2;
  int64 user_id = 3;
  int64 game_id = 4;
}
message LogGEnterResponse {
  string result = 1; //another new secret key
}

//LogLeave  is also a LogScore
//LogLeave = log the status of quiting a game and update the score
message LogGLeaveRequest {
  string secret = 1; //to be use over here
  string access_token = 2;
  int64 id = 3;
  int32 game_score = 4;
}
message LogGLeaveResponse {
  string result = 1;
}


















/*
*************************************** Invite ***************************************
*/
//this will generate an invitation url
message GenerateInviteUrlRequest {
  int64 invited_by = 1;
  string target_email = 2;
}
message GenerateInviteUrlResponse {
  string result = 1;  
}

//Add a new Invite, added when "new user" joined
message AddInviteRequest {
  int64 user_id = 1;
  int64 invited_by = 2;
}
message AddInviteResponse {
  string result = 1; 
}


//Claim an existing Invite where invite_id
message ClaimInviteRequest {
  int64 id = 1;
}
message ClaimInviteResponse {
  string result = 1;
}


//List the Invites filter by invite_by from db
message ListInvitedByRequest {
  int64 invited_by = 1;
  bool is_claimed = 2;
}
message ListInvitedByResponse {
  repeated InvitedByDetail result = 1;
}
message InvitedByDetail {
  int64 id = 1;
  int64 user_id = 2;
  int64 invited_by = 3;
  int64 invited_date = 4;
  bool is_claimed = 5;
  int64 claimed_date = 6;
}

//Get Invites Count based on is_claimed & invited_by, false=not claimed, true=claimed
message GetInvitedByCountRequest {
  int64 invited_by = 1;
  bool is_claimed = 2;
}
message GetInvitedByCountResponse {
  string result = 1;
}

//Delete an existing game from db
message DeleteInviteRequest {
  int64 id = 1;
}
message DeleteInviteResponse {
  string result = 1;
}


















/*
**************************************** Item ***************************************
*/
//Add a new Item
message AddItemRequest {
  string title = 1;
  string subtitle = 2;
  string content = 3;
  string img_url = 4;
  int32 type_id = 5;
  double price = 6;
  int32 quantity = 7;
  int32 status = 8;
}
message AddItemResponse {
  string result = 1;
}


//Update an Item data
message UpdateItemRequest {
  int64 id = 1;
  string title = 2;
  string subtitle = 3;
  string content = 4;
  string img_url = 5;
  int32 type_id = 6;
  double price = 7;
  int32 quantity = 8;
  int32 status = 9;
}
message UpdateItemResponse {
  string result = 1;
}


//Delete an Item from db
message DeleteItemRequest {
  int64 id = 1;
}
message DeleteItemResponse {
  string result = 1;
}


//Get Item from db
message ListItemRequest {
  int64 limit = 1;
  int64 offset = 2;
  string search_title = 3;
  int32 status = 4;
}
message ListItemResponse {
  repeated ItemDetail result = 1;
}
message ItemDetail {
  int64 id = 1;
  string title = 2;
  string subtitle = 3;
  string content = 4;
  string img_url = 5;
  int32 type_id = 6;
  double price = 7;
  int32 quantity = 8;
  int32 status = 9;
}


//Get Count based on Status ID, 1=Draft, 2=Published, 3=Archived/Blocked
message GetItemCountRequest {
}
message GetItemCountResponse {
  ItemCount result = 1;
}
message ItemCount {
  int64 draft = 1;
  int64 published = 2;
  int64 archived = 3;
}

//Get ItemType from db
message ListItemTypeRequest {
}
message ListItemTypeResponse {
  repeated ItemTypeDetail result = 1;
}
message ItemTypeDetail {
  int32 id = 1;
  string title = 2;
}


















/*
**************************************** Prize ***************************************
*/
//Add a new prize
message AddPrizeRequest {
  string title = 1;
  string subtitle = 2;
  string img_url = 3;
  string content = 4;
  int32 type_id = 5;
  int64 tickets_required = 6;
  int32 duration_days = 7;
  int32 duration_hours = 8;
  double timezone  = 9;
  int64 scheduled_on = 10;
  bool is_repeat =  11;
  repeated int32 repeated_on = 12;
  int32 status = 13;
  repeated int64 tournament_ids = 14;
}
message AddPrizeResponse {
  string result = 1;
}


//Update an existing prize data
message UpdatePrizeRequest {
  int64 id = 1;
  string title = 2;
  string subtitle = 3;
  string img_url = 4;
  string content = 5;
  int32 type_id = 6;
  int64 tickets_required = 7;
  int32 duration_days = 8;
  int32 duration_hours = 9;
  double timezone = 10;
  int64 scheduled_on = 11;
  bool is_repeat =  12;
  repeated int32 repeated_on = 13;
  int32 status = 14;
  repeated int64 tournament_ids = 15;
}
message UpdatePrizeResponse {
  string result = 1;
}


//Delete an existing prize from db
message DeletePrizeRequest {
  string secret = 1;
  int64 id = 2;
}
message DeletePrizeResponse {
  string result = 1;
}


//List prize from db
message ListPrizeRequest {
  int64 limit = 1;
  int64 offset = 2;
  string search_title = 3;
  int32 status = 4;
}
message ListPrizeResponse {
  repeated PrizeDetail result = 1;
}
message PrizeDetail {
  int64 id = 1;
  string title = 2;
  string subtitle = 3;
  string img_url = 4;
  string content = 5;
  int32 type_id = 6;
  int64 tickets_required = 7;
  int32 duration_days = 8;
  int32 duration_hours = 9;
  double timezone = 10;
  int64 scheduled_on = 11;
  bool is_repeat =  12;
  repeated int32 repeated_on = 13;
  int32 status = 14;
  repeated int64 tournament_ids = 15;
  int32 status_prize = 16;
  int64 tickets_collected = 17;
}



//Get Count based on Status ID, 1=Draft, 2=Published, 3=Archived/Blocked
message GetPrizeCountRequest {
}
message GetPrizeCountResponse {
  PrizeCount result = 1;
}
message PrizeCount {
  int64 draft = 1;
  int64 published = 2;
  int64 archived = 3;
}

//Get PrizeType from db
message ListPrizeTypeRequest {
}
message ListPrizeTypeResponse {
  repeated PrizeTypeDetail result = 1;
}
message PrizeTypeDetail {
  int32 id = 1;
  string title = 2;
}


















/*
**************************************** Rank ***************************************
*/
//Add a new rank
message AddRankRequest {
  string title = 1;
  int64 exp = 2;
  int64 gem = 3;
  double multiplier = 4;
}
message AddRankResponse {
  string result = 1;
}


//Update an existing rank data
message UpdateRankRequest {
  int64 id = 1;
  string title = 2;
  int64 exp = 3;
  int64 gem = 4;
  double multiplier = 5;
}
message UpdateRankResponse {
  string result = 1;
}


//Delete an existing rank from db
message DeleteRankRequest {
  int64 id = 1;
}
message DeleteRankResponse {
  string result = 1;
}


//Get rank list from db
message ListRankRequest {
}
message ListRankResponse {
  repeated RankDetail result = 1;
}
message RankDetail {
  int64 id = 1;
  string title = 2;
  int64 exp = 3;
  int64 gem = 4;
  double multiplier = 5;
}


















/*
**************************************** Shop ***************************************
*/
//Buy an Item_Gem or Item_Subscription
//item_type_id for gem = 1, subscription = 2
message BuyRequest {
  string secret = 1;
  int32 item_type_id = 2;
  int64 item_id = 3;
  int64 user_id = 4;
}
message BuyResponse {
  string result = 1;
}


















/*
**************************************** Subscription ***************************************
*/
//Add a new Item
message AddSubscriptionRequest {
  string title = 1;
  string subtitle = 2;
  string content = 3;
  string img_url = 4;
  int32 type_id = 5;
  double price = 6;
  int32 quantity = 7;
  int32 status = 8;
}
message AddSubscriptionResponse {
  string result = 1;
}


//Update an Item data
message UpdateSubscriptionRequest {
  int64 id = 1;
  string title = 2;
  string subtitle = 3;
  string content = 4;
  string img_url = 5;
  int32 type_id = 6;
  double price = 7;
  int32 quantity = 8;
  int32 status = 9;
}
message UpdateSubscriptionResponse {
  string result = 1;
}


//Delete an Item from db
message DeleteSubscriptionRequest {
  int64 id = 1;
}
message DeleteSubscriptionResponse {
  string result = 1;
}


//Get Subscription from db
message ListSubscriptionRequest {
  int64 limit = 1;
  int64 offset = 2;
  string search_title = 3;
  int32 status = 4;
}
message ListSubscriptionResponse {
  repeated SubscriptionDetail result = 1;
}
message SubscriptionDetail {
  int64 id = 1;
  string title = 2;
  string subtitle = 3;
  string content = 4;
  string img_url = 5;
  int32 type_id = 6;
  double price = 7;
  int32 quantity = 8;
  int32 status = 9;
}


//Get Count based on Status ID, 1=Draft, 2=Published, 3=Archived/Blocked
message GetSubscriptionCountRequest {
}
message GetSubscriptionCountResponse {
  SubscriptionCount result = 1;
}
message SubscriptionCount {
  int64 draft = 1;
  int64 published = 2;
  int64 archived = 3;
}

//Get SubscriptionType from db
message ListSubscriptionTypeRequest {
}
message ListSubscriptionTypeResponse {
  repeated SubscriptionTypeDetail result = 1;
}
message SubscriptionTypeDetail {
  int32 id = 1;
  string title = 2;
}


















/*
**************************************** Tournament ***************************************
*/
//Add a new tournament
message AddTournamentRequest {
  string title = 1;
  repeated int64 tour_set_ids = 2;
  int32 status = 3;
}
message AddTournamentResponse {
  string result = 1;
}
//Add a new tournament Set
message AddTournamentSetRequest {
  string title = 1;
  int32 duration_days = 2;
  int32 duration_hours = 3;
  bool is_group = 4;
}
message AddTournamentSetResponse {
  string result = 1;
}
//Add a new tournament Set Game Rule
message AddTournamentSetGameRuleRequest {
  int64 set_id = 1;
  int64 game_id = 2;
  int32 duration_days = 3;
  int32 duration_hours = 4;
  int32 duration_minutes = 5;
  int32 group_id = 6;
}
message AddTournamentSetGameRuleResponse {
  string result = 1;
}

//Update an tournament data
message UpdateTournamentRequest {
  int64 id = 1;
  string title = 2;
  repeated int64 tour_set_ids = 3;
  int32 status = 4;
}
message UpdateTournamentResponse {
  string result = 1;
}
//Update a tournament Set
message UpdateTournamentSetRequest {
  int64 id = 1;
  string title = 2;
  int32 duration_days = 3;
  int32 duration_hours = 4;
  bool is_group = 5;
}
message UpdateTournamentSetResponse {
  string result = 1;
}
//Add a new tournament Set Game Rule
message UpdateTournamentSetGameRuleRequest {
  int64 id = 1;
  int64 set_id = 2;
  int64 game_id = 3;
  int32 duration_days = 4;
  int32 duration_hours = 5;
  int32 duration_minutes = 6;
  int32 group_id = 7;
}
message UpdateTournamentSetGameRuleResponse {
  string result = 1;
}

//Delete an tournament from db
message DeleteTournamentRequest {
  int64 id = 1;
}
message DeleteTournamentResponse {
  string result = 1;
}
//Delete a tournament Set
message DeleteTournamentSetRequest {
  int64 id = 1;
}
message DeleteTournamentSetResponse {
  string result = 1;
}
//Delete a tournament Set
message DeleteTournamentSetGameRuleRequest {
  int64 id = 1;
}
message DeleteTournamentSetGameRuleResponse {
  string result = 1;
}

//List tournament from db
message ListTournamentRequest {
  int64 limit = 1;
  int64 offset = 2;
  string search_title = 3;
  int32 status = 4;
}
message ListTournamentResponse {
  repeated TournamentDetail result = 1;
}
message TournamentDetail {
  int64 id = 1;
  string title = 2;
  repeated int64 tour_set_ids = 3;
  int32 status = 4;
}

//List tournament Set  
message ListTournamentSetRequest {
  int64 limit = 1;
  int64 offset = 2;
  string search_title = 3;
}
message ListTournamentSetResponse {
  repeated TournamentSetDetail result = 1;
}
message TournamentSetDetail {
  int64 id = 1;
  string title = 2;
  int32 duration_days = 3;
  int32 duration_hours = 4;
  bool is_group = 5;
}
//List tournament Set Game Rule
message ListTournamentSetGameRuleRequest {
  int64 id = 1;
}
message ListTournamentSetGameRuleResponse {
  repeated TournamentSetGameRuleDetail result = 1;
}
message TournamentSetGameRuleDetail {
  int64 id = 1;
  int64 set_id = 2;
  int64 game_id = 3;
  int32 duration_days = 4;
  int32 duration_hours = 5;
  int32 duration_minutes = 6;
  int32 group_id = 7;
}

//Get Count based on Status ID, 1=Draft, 2=Published, 3=Archived/Blocked
message GetTournamentCountRequest {
}
message GetTournamentCountResponse {
  TournamentCount result = 1;
}
message TournamentCount {
  int64 draft = 1;
  int64 published = 2;
  int64 archived = 3;
}

//Get Count based on Status ID, 1=Draft, 2=Published, 3=Archived/Blocked
message GetTournamentSetCountRequest {
}
message GetTournamentSetCountResponse {
  TournamentSetCount result = 1;
}
message TournamentSetCount {
  int64 total = 1;
}

















/*
**************************************** Winner ***************************************
*/
//Add a new winner
message AddWinnerRequest {
  int64 prize_id = 1;
  int64 user_id = 2;
  int64 tournament_id = 3;
}
message AddWinnerResponse {
  string result = 1;
}

//Delete an existing winner from db
message DeleteWinnerRequest {
  int64 id = 1;
}
message DeleteWinnerResponse {
  string result = 1;
}

//Claim
message ClaimWinnerRequest {
  int64 id = 1;
  int64 user_id = 2;
  string id_token = 3;
}
message ClaimWinnerResponse {
  string result = 1;
}

//List winner from db
message ListWinnerRequest {
  int64 limit = 1;
  int64 offset = 2;
}
message ListWinnerResponse {
  repeated WinnerDetail result = 1;
}
message WinnerDetail {
  int64 id = 1;
  int64 prize_id = 2;
  int64 user_id = 3;
  int64 created_on = 4;
  int32 status = 5;
  int64 tournament_id = 6;
}

message GetWinnerCountRequest {
}
message GetWinnerCountResponse {
  WinnerCount result = 1;
}
message WinnerCount {
  int64 active = 1;
  int64 archived = 2;
}
