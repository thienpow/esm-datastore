syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.esportsmini.esmapi";
option java_outer_classname = "EsmApiProto";

package api.esm;


service EsmApi {
  
  // Common
  rpc ListStatusType(ListStatusTypeRequest) returns (ListStatusTypeResponse) {}
  rpc ListWinType(ListWinTypeRequest) returns (ListWinTypeResponse) {}
  rpc ListTimezones(ListTimezonesRequest) returns (ListTimezonesResponse) {}
  
  // User
  rpc SignIn(SignInRequest) returns (SignInResponse) {}
  rpc AddUser(AddUserRequest) returns (AddUserResponse) {}
  rpc UpdateSocialLinkFB(UpdateSocialLinkFBRequest) returns (UpdateSocialLinkFBResponse) {}
  rpc UpdateSocialLinkGoogle(UpdateSocialLinkGoogleRequest) returns (UpdateSocialLinkGoogleResponse) {}
  rpc UpdateAddress(UpdateAddressRequest) returns (UpdateAddressResponse) {}
  rpc UpdateUserSettings(UpdateUserSettingsRequest) returns (UpdateUserSettingsResponse) {}
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {}

  // Config
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {}
  // Spinner 
  rpc ListSpinnerRule(ListSpinnerRuleRequest) returns (ListSpinnerRuleResponse) {}
  // Game
  rpc ListGameLeaderRule(ListGameLeaderRuleRequest) returns (ListGameLeaderRuleResponse) {}
  rpc GetGameCode(GetGameCodeRequest) returns (GetGameCodeResponse) {}

  // GPlayer
  rpc LogGEnter(LogGEnterRequest) returns (LogGEnterResponse) {}
  rpc LogGLeave(LogGLeaveRequest) returns (LogGLeaveResponse) {}
  rpc ListLogG(ListLogGRequest) returns (ListLogGResponse) {}

  // Invite
  rpc GenerateInviteURL(GenerateInviteUrlRequest) returns(GenerateInviteUrlResponse) {}
  rpc AddInvite(AddInviteRequest) returns (AddInviteResponse) {}
  rpc ClaimInvite(ClaimInviteRequest) returns (ClaimInviteResponse) {}
  rpc ListInvitedBy(ListInvitedByRequest) returns (ListInvitedByResponse) {}

  // Item
  rpc ListItem(ListItemRequest) returns (ListItemResponse) {}
  rpc GetItemCount(GetItemCountRequest) returns (GetItemCountResponse) {}
  rpc ListItemType(ListItemTypeRequest) returns (ListItemTypeResponse) {}

  // Prize
  rpc ListPrize(ListPrizeRequest) returns (ListPrizeResponse) {}

  // Rank
  rpc ListRank(ListRankRequest) returns (ListRankResponse) {}

  // Shop
  rpc Buy(BuyRequest) returns (BuyResponse) {}

  // Subscription
  rpc ListSubscription(ListSubscriptionRequest) returns (ListSubscriptionResponse) {}
  rpc GetSubscriptionCount(GetSubscriptionCountRequest) returns (GetSubscriptionCountResponse) {}
  rpc ListSubscriptionType(ListSubscriptionTypeRequest) returns (ListSubscriptionTypeResponse) {}

  // Winner
  rpc ListWinner(ListWinnerRequest) returns (ListWinnerResponse) {}
  rpc ClaimWinner(ClaimWinnerRequest) returns (ClaimWinnerResponse) {}

}
















/*
*************************************** Common ***************************************
*/

//Get StatusType from db
message ListStatusTypeRequest {
}
message ListStatusTypeResponse {
  repeated StatusTypeDetail result = 1;
}
message StatusTypeDetail {
  int32 id = 1;
  string title = 2;
}

//Get WinType from db
message ListWinTypeRequest {
}
message ListWinTypeResponse {
  repeated WinTypeDetail result = 1;
}
message WinTypeDetail {
  int32 id = 1;
  string title = 2;
}

//Get Timezones from db
message ListTimezonesRequest {
}
message ListTimezonesResponse {
  repeated TimezonesDetail result = 1;
}
message TimezonesDetail {
  int32 id = 1;
  double offset = 2;
  string stext = 3;
  string ltext = 4;
}



/*
*************************************** User ***************************************
*/

message SignInRequest {
  string id_token = 1;
  string username = 2; //maximum 128 characters, usually firebase user.uid
}
message SignInResponse {
  UserDetail result = 1;
}
//Add a new user
message AddUserRequest {
  string username = 1;
  string password = 2;
  string email = 3;
  string phone = 4;
  string firstname = 5;
  string lastname = 6;
  string social_link_fb = 7;
  string social_link_google = 8;
  string avatar_url = 9;
  string id_token = 10; // firebase.auth().currentUser.getIdToken
}
message AddUserResponse {
  string result = 1; //response a id
}

//Update an existing user data
message UpdateSocialLinkFBRequest {
  int64 id = 1;
  string fb_id = 2;
}
message UpdateSocialLinkFBResponse {
  string result = 1;
}

//Update an existing user data
message UpdateSocialLinkGoogleRequest {
  int64 id = 1;
  string google_id = 2;
}
message UpdateSocialLinkGoogleResponse {
  string result = 1;
}

//Update an existing user data
message UpdateUserStatusRequest {
  int64 id = 1;
  int32 status = 2;
}
message UpdateUserStatusResponse {
  string result = 1;
}

//Update an existing user data
message UpdateAddressRequest {
  int64 id = 1;
  string full_name = 2;
  string address = 3;
  string city = 4;
  string state = 5;
  string zip_code= 6;
  string country = 7;
  string country_code = 8;
}
message UpdateAddressResponse {
  string result = 1;
}

//Update an existing user data
message UpdateUserSettingsRequest {
  int64 id = 1;
  bool is_notify_allowed = 2;
  bool is_notify_new_reward = 3;
  bool is_notify_new_tournament = 4;
  bool is_notify_tour_ending = 5;
  string nick_name = 6;
}
message UpdateUserSettingsResponse {
  string result = 1;
}

//Update an existing user data
message ChangePasswordRequest {
  string username = 1;
  string old_password = 2;
  string new_password = 3;
}
message ChangePasswordResponse {
  string result = 1;
}

message UserDetail {
  int64 id = 1;
  string username = 2;
  string email = 3;
  string phone = 4;
  string firstname = 5;
  string lastname = 6;
  int64 created_on = 7;
  int64 last_login = 8;
  int32 role_id = 9;
  int32 status = 10;
  int64 gem_balance = 11;
  string social_link_fb = 12;
  string social_link_google = 13;
  string avatar_url = 14;
  int32 exp = 15;
  string full_name = 16;
  string address = 17;
  string city = 18;
  string state = 19;
  string zip_code= 20;
  string country = 21;
  int32 country_code = 22;
  bool is_notify_allowed = 23;
  bool is_notify_new_reward = 24;
  bool is_notify_new_tournament = 25;
  bool is_notify_tour_ending = 26;
  string nick_name = 27;
}


















/*
*************************************** Config ***************************************
*/
//Get config Get from db
message GetConfigRequest {
}
message GetConfigResponse {
  ConfigDetail result = 1;
}
message ConfigDetail {
  int32 invites = 1;
  int32 games_per_ad = 2;
  int32 days_to_claim = 3;
  int32 freespin_per_day = 4;
  int32 gems_per_spins_1 = 5;
  int32 ads_per_spins_1 = 6;
  int32 gems_per_spins_2 = 7;
  int32 ads_per_spins_2 = 8;
}






//list game score rules from db
message ListSpinnerRuleRequest {
}
message ListSpinnerRuleResponse {
  repeated SpinnerRuleDetail result = 1;
}
message SpinnerRuleDetail {
  int32 id = 1;
  double probability = 2;
  double win = 3;
  int32 type_id = 4;
}













/*
*************************************** Game ***************************************
*/
//list game score rules from db
message ListGameLeaderRuleRequest {
  int64 game_id = 1;
}
message ListGameLeaderRuleResponse {
  repeated GameLeaderRuleDetail result = 1;
}
message GameLeaderRuleDetail {
  int64 game_id = 1;
  int32 rank_from = 2;
  int32 rank_to= 3;
  int32 tickets = 4;
  int32 exp = 5;
}

//Get the game's code from db
message GetGameCodeRequest {
  int64 id = 1;
}
message GetGameCodeResponse {
  string result = 1;
}

















/*
*************************************** GPlayer ***************************************
*/
//LogEnter will response a secret key to be used for LogLeave
//LogEnter = log the status of starting a game
message LogGEnterRequest {
  string secret = 1;
  int64 user_id = 2;
  int64 prize_id = 3;
  int64 game_id = 4;
  bool is_watched_ad = 5;
}
message LogGEnterResponse {
  string result = 1; //another new secret key
}

//LogLeave  is also a LogScore
//LogLeave = log the status of quiting a game and update the score
message LogGLeaveRequest {
  string secret = 1; //to be use over here
  int64 id = 2;
  int32 game_score = 3;
}
message LogGLeaveResponse {
  string result = 1;
}

message ListLogGRequest {
  int64 user_id = 1;
  int64 limit = 2;
  int64 offset = 3;
}
message ListLogGResponse {
  repeated LogGDetail result = 1;
}
message LogGDetail {
  int64 id = 1;
  int64 user_id = 2;
  int64 prize_id = 3;
  string prize_title = 4;
  string prize_img_url = 5;
  int64 game_id = 6;
  string game_title = 7;
  string game_img_url = 8;
  int64 enter_timestamp = 9;
  int64 leave_timestamp = 10;
  bool is_watched_ad = 11;
  int32 game_score = 12;
}
















/*
*************************************** Invite ***************************************
*/
//this will generate an invitation url
message GenerateInviteUrlRequest {
  int64 invited_by = 1;
  string target_email = 2;
}
message GenerateInviteUrlResponse {
  string result = 1;  
}

//Add a new Invite, added when "new user" joined
message AddInviteRequest {
  int64 user_id = 1;
  int64 invited_by = 2;
}
message AddInviteResponse {
  string result = 1; 
}


//Claim an existing Invite where invite_id
message ClaimInviteRequest {
  int64 id = 1;
}
message ClaimInviteResponse {
  string result = 1;
}


//List the Invites filter by invite_by from db
message ListInvitedByRequest {
  int64 invited_by = 1;
  bool is_claimed = 2;
}
message ListInvitedByResponse {
  repeated InvitedByDetail result = 1;
}
message InvitedByDetail {
  int64 id = 1;
  int64 user_id = 2;
  int64 invited_by = 3;
  int64 invited_date = 4;
  bool is_claimed = 5;
  int64 claimed_date = 6;
}

//Get Invites Count based on is_claimed & invited_by, false=not claimed, true=claimed
message GetInvitedByCountRequest {
  int64 invited_by = 1;
  bool is_claimed = 2;
}
message GetInvitedByCountResponse {
  string result = 1;
}


















/*
**************************************** Item ***************************************
*/

//Get Item from db
message ListItemRequest {
  int64 limit = 1;
  int64 offset = 2;
}
message ListItemResponse {
  repeated ItemDetail result = 1;
}
message ItemDetail {
  int64 id = 1;
  string title = 2;
  string subtitle = 3;
  string content = 4;
  string img_url = 5;
  int32 type_id = 6;
  double price = 7;
  int32 quantity = 8;
  int32 status = 9;
}


//Get Count based on Status ID, 1=Draft, 2=Published, 3=Archived/Blocked
message GetItemCountRequest {
}
message GetItemCountResponse {
  ItemCount result = 1;
}
message ItemCount {
  int64 draft = 1;
  int64 published = 2;
  int64 archived = 3;
}

//Get ItemType from db
message ListItemTypeRequest {
}
message ListItemTypeResponse {
  repeated ItemTypeDetail result = 1;
}
message ItemTypeDetail {
  int32 id = 1;
  string title = 2;
}


















/*
**************************************** Prize ***************************************
*/
//List prize from db
message ListPrizeRequest {
}
message ListPrizeResponse {
  repeated PrizeDetail result = 1;
}
message PrizeDetail {
  int64 prize_id = 1;
  string prize_title = 2;
  string prize_subtitle = 3;
  string prize_img_url = 4;
  string prize_content = 5;
  int32 prize_duration_days = 6;
  int32 prize_duration_hours = 7;
  int32 type_id = 8;
  int64 tickets_required = 9;
  double timezone = 10;
  int64 scheduled_on = 11;
  bool is_repeat =  12;
  repeated int32 repeated_on = 13;
  int32 status = 14;
  int32 status_prize = 15;
  int64 tickets_collected = 16;
  int64 tour_id = 17;
  string tour_title  = 18;
  int64 set_id = 19;
  string set_title  = 20;
  int64 game_id = 21;
  string game_title  = 22;
  string game_subtitle = 23;
  string game_img_url = 24;
  string game_content = 25;
  int32 game_duration_days = 26;
  int32 game_duration_hours = 27;
  int32 game_duration_minutes = 28;
  int32 group_id = 29;
}



















/*
**************************************** Rank ***************************************
*/
//Get rank list from db
message ListRankRequest {
}
message ListRankResponse {
  repeated RankDetail result = 1;
}
message RankDetail {
  int64 id = 1;
  string title = 2;
  int64 exp = 3;
  int64 gem = 4;
  double multiplier = 5;
}


















/*
**************************************** Shop ***************************************
*/
//Buy an Item_Gem or Item_Subscription
//item_type_id for gem = 1, subscription = 2
message BuyRequest {
  string secret = 1;
  int32 item_type_id = 2;
  int64 item_id = 3;
  int64 user_id = 4;
}
message BuyResponse {
  string result = 1;
}


















/*
**************************************** Subscription ***************************************
*/
//Get Subscription from db
message ListSubscriptionRequest {
  int64 limit = 1;
  int64 offset = 2;
}
message ListSubscriptionResponse {
  repeated SubscriptionDetail result = 1;
}
message SubscriptionDetail {
  int64 id = 1;
  string title = 2;
  string subtitle = 3;
  string content = 4;
  string img_url = 5;
  int32 type_id = 6;
  double price = 7;
  int32 quantity = 8;
  int64 one_time_gem = 9;
  double one_time_multiplier = 10;
  bool one_time_is_firstonly = 11;
  int64 daily_gem = 12;
  double daily_multiplier  = 13;
  int32 status = 14;
}


//Get Count based on Status ID, 1=Draft, 2=Published, 3=Archived/Blocked
message GetSubscriptionCountRequest {
}
message GetSubscriptionCountResponse {
  SubscriptionCount result = 1;
}
message SubscriptionCount {
  int64 draft = 1;
  int64 published = 2;
  int64 archived = 3;
}

//Get SubscriptionType from db
message ListSubscriptionTypeRequest {
}
message ListSubscriptionTypeResponse {
  repeated SubscriptionTypeDetail result = 1;
}
message SubscriptionTypeDetail {
  int32 id = 1;
  string title = 2;
}


















/*
**************************************** Winner ***************************************
*/
//Claim
message ClaimWinnerRequest {
  int64 id = 1;
  int64 user_id = 2;
  string id_token = 3;
}
message ClaimWinnerResponse {
  string result = 1;
}

//List winner from db
message ListWinnerRequest {
  int64 limit = 1;
  int64 offset = 2;
}
message ListWinnerResponse {
  repeated WinnerDetail result = 1;
}
message WinnerDetail {
  int64 id = 1;
  int64 prize_id = 2;
  string prize_title = 3;
  string prize_img_url = 4;
  int64 user_id = 5;
  string user_nick_name = 6;
  int64 created_on = 7;
  int32 status = 8;
}
